@page "/"
@using EksploracjaDanych.Models
<PageTitle>Eksploracja danych</PageTitle>
<div class="form-group">
    <h1 class="text-lg-center">Wyznaczanie modelu</h1>

    <select class="form-select mt-2" id="dataType" @bind="_modelType">
        <option selected value="-1">Wybierz model</option>
        <option value="0">MODEL KLASYFIKACYJNY</option>
        <option value="1">MODEL REGRESYJNY</option>
    </select>

    @if (_isBadModel)
    {
        <p class="text-danger">Proszę wybrać poprawny model.</p>
    }

    <InputFile class="form-control mt-2" OnChange="@OnInputFileChange"/>
    @if (_wrongFileType)
    {
        <p class="text-danger">Zły format pliku\Brak pliku.</p>
    }
    <button type="button" class="btn btn-outline-dark mt-2 float-end" @onclick="Generate">
        @if (_loading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Generuję...</span>
        }
        else
        {
            <span>Oblicz dane</span>
        }
    </button>
</div>

@if (_calculated)
{
    <div class="mt-3 w-100">

        @if ((ModelType)_modelType == ModelType.Classification && _classificationMatrix1 is not null && _classificationMatrix2 is not null)
        {
            <div class="mt-5 d-inline-flex w-100">
                <ConfusionTable TargetModel="@_classificationMatrix1" Title="Model pierwszy" ComparativeModel="@_classificationMatrix2"/>
                <LineChart Values="@_values.ToList()" Min="0" Max="100"/>
            </div>
            <div class="mt-5 d-inline-flex w-100">
                <ConfusionTable TargetModel="@_classificationMatrix2" Title="Model drugi" ComparativeModel="@_classificationMatrix1"/>
                <LineChart Values="@_values.ToList()" Min="0" Max="100"/>
            </div>
        }
        @if ((ModelType)_modelType == ModelType.Regression && _regressionModel1 is not null && _regressionModel2 is not null)
        {
            <div class="mt-5 d-inline-flex w-100">
                <RegressionResult Title="Model pierwszy" TargetModel="@_regressionModel1" ComparativeModel="@_regressionModel2"/>
                <RegressionResult Title="Model drugi" TargetModel="@_regressionModel2" ComparativeModel="@_regressionModel1"/>
            </div>
        }
    </div>
}

@code
{
    private readonly int _maxAllowedFileSize = 1024 * 1024 * 1024 * 1;

    // sample double array
    private double[] _values = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
    private bool _isBadModel;
    private bool _wrongFileType;
    private bool _loading;
    private bool _calculated;
    private int _modelType = -1;

    private IBrowserFile? _file;

    private ConfusionMatrix? _classificationMatrix1;
    private ConfusionMatrix? _classificationMatrix2;

    private RegressionModel? _regressionModel1;
    private RegressionModel? _regressionModel2;

    private Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        try
        {
            if (file.ContentType != "text/csv")
            {
                _wrongFileType = true;
                return Task.CompletedTask;
            }

            _file = file;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return Task.CompletedTask;
    }

    private async Task Generate()
    {
        if (_modelType is (int)ModelType.Default)
        {
            _isBadModel = true;
            return;
        }
        _isBadModel = false;

        if (_file is null)
        {
            _wrongFileType = true;
            return;
        }
        _wrongFileType = false;
        _loading = true;

        var reader =
            await new StreamReader(_file.OpenReadStream(_maxAllowedFileSize)).ReadToEndAsync();
        var data = reader.Split("\r\n").Select(x => x.Split(",")).ToList();
        switch ((ModelType)_modelType)
        {
            case ModelType.Classification:
                Classification(data);
                _loading = false;
                _calculated = true;
                break;

            case ModelType.Regression:
                Regression(data);
                _loading = false;
                _calculated = true;
                break;

            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void Classification(List<string[]> data)
    {
        var confusionMatrixModel1 = new ConfusionMatrix();
        var confusionMatrixModel2 = new ConfusionMatrix();

        foreach (var row in data.Skip(1).SkipLast(1).ToList())
        {
            var realValue = row[0];
            var model1Value = row[1];
            var model2Value = row[3];

    // True value == <=50k
            if (realValue.Equals(">50K"))
            {
                if (model1Value == realValue)
                    confusionMatrixModel1.AddTruePositive();
                else
                    confusionMatrixModel1.AddFalseNegative();

                if (model2Value == realValue)
                    confusionMatrixModel2.AddTruePositive();
                else
                    confusionMatrixModel2.AddFalseNegative();
            }

    // False value == >50k
            else if (row[0].Equals("<=50K"))
            {
                if (model1Value == realValue)
                    confusionMatrixModel1.AddTrueNegative();
                else
                    confusionMatrixModel1.AddFalsePositive();

                if (model2Value == realValue)
                    confusionMatrixModel2.AddTrueNegative();
                else
                    confusionMatrixModel2.AddFalsePositive();
            }
        }
        _classificationMatrix1 = confusionMatrixModel1;
        _classificationMatrix2 = confusionMatrixModel2;
    }

    private void Regression(List<string[]> data)
    {
        var fixedData = data.Skip(1).SkipLast(1).Select(x => x.Select(y => double.Parse(y)).ToArray()).ToList();
        int n = fixedData.Count;
        double MAE1 = 0, MSE1 = 0, RMSE1 = 0, MAPE1 = 0;
        double MAE2 = 0, MSE2 = 0, RMSE2 = 0, MAPE2 = 0;

        foreach (var row in fixedData)
        {
            MAE1 += Math.Abs(row[0] - row[1]);
            MAE2 += Math.Abs(row[0] - row[2]);

            MSE1 += Math.Pow(row[0] - row[1], 2);
            MSE2 += Math.Pow(row[0] - row[2], 2);

            MAPE1 += Math.Abs(row[0] - row[1]) / row[0];
            MAPE2 += Math.Abs(row[0] - row[2]) / row[0];
        }
        MSE1 /= n;
        MSE2 /= n;

        _regressionModel1 = new();
        _regressionModel2 = new();

        _regressionModel1.MAE = MAE1 / n;
        _regressionModel2.MAE = MAE2 / n;

        _regressionModel1.MSE = MSE1;
        _regressionModel2.MSE = MSE2;

        _regressionModel1.RMSE = Math.Sqrt(MSE1);
        _regressionModel2.RMSE = Math.Sqrt(MSE2);

        _regressionModel1.MAPE = MAPE1 * (100.0 / n);
        _regressionModel2.MAPE = MAPE2 * (100.0 / n);
    }

    private enum ModelType
    {
        Default = -1,
        Classification = 0,
        Regression = 1
    }
}