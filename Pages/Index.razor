@page "/"

<PageTitle>Eksploracja danych</PageTitle>
<h1>Wyznaczanie modelu</h1>

<select class="form-select mt-2" id="dataType" style="width: 25%" @bind="_modelType">
    <option selected value="-1">Wybierz model</option>
    <option value="0">MODEL KLASYFIKACYJNY</option>
    <option value="1">MODEL REGRESYJNY</option>
</select>

@if (_isBadModel)
{
    <p class="text-danger">Proszę wybrać poprawny model.</p>
}

<InputFile class="form-control mt-2" style="width: 25%" OnChange="@OnInputFileChange"/>
@if (_wrongFileType)
{
    <p class="text-danger">Zły format pliku\Brak pliku.</p>
}
<button type="button" class="btn btn-outline-dark mt-2" @onclick="Generate">Oblicz dane</button>


@code
{
    private readonly int _maxAllowedFileSize = 1024 * 1024 * 1024 * 1;
    private bool _isBadModel;
    private bool _wrongFileType;
    private int _modelType = -1;
    private IBrowserFile? _file;

    private Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        try
        {
            if (file.ContentType != "text/csv")
            {
                _wrongFileType = true;
                return Task.CompletedTask;
            }

            _file = file;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return Task.CompletedTask;
    }

    private async Task Generate()
    {
        if (_modelType is (int)ModelType.Default)
        {
            _isBadModel = true;
            return;
        }
        _isBadModel = false;

        if (_file is null)
        {
            _wrongFileType = true;
            return;
        }
        _wrongFileType = false;

        var reader =
            await new StreamReader(_file.OpenReadStream(_maxAllowedFileSize)).ReadToEndAsync();
        var data = reader.Split("\r\n").Select(x => x.Split(",")).ToList();
        switch ((ModelType)_modelType)
        {
            case ModelType.Classification:
                Classification(data);
                break;
            case ModelType.Regression:
                Regression(data);
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void Classification(List<string[]> data)
    {
        throw new NotImplementedException();
    }

    private void Regression(List<string[]> data)
    {
        var fixedData = data.Skip(1).SkipLast(1).Select(x => x.Select(y => double.Parse(y)).ToArray()).ToList();
        throw new NotImplementedException();
    }

    private enum ModelType
    {
        Default = -1,
        Classification = 0,
        Regression = 1
    }
}