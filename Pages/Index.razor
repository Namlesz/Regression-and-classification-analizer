@page "/"
@using EksploracjaDanych.Models

<PageTitle>Eksploracja danych</PageTitle>
<div class="form-group">
    <h1 class="text-lg-center">Wyznaczanie modelu</h1>
    <select class="form-select mt-2" id="dataType" @bind="_modelType">
        <option selected value="-1">Wybierz model</option>
        <option value="0">MODEL KLASYFIKACYJNY</option>
        <option value="1">MODEL REGRESYJNY</option>
    </select>

    @if (_isBadModel)
    {
        <p class="text-danger mt-1">Proszę wybrać poprawny model.</p>
    }

    <InputFile class="form-control mt-2" OnChange="@OnInputFileChange"/>
    @if (_wrongFileType)
    {
        <p class="text-danger mt-1">Zły format pliku.</p>
    }

    <button type="button" class="btn btn-outline-dark mt-2 float-end" @onclick="Generate">
        @if (_loading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Generuję...</span>
        }
        else
        {
            <span>Oblicz model</span>
        }
    </button>
</div>

@if (_calculated)
{
    <div class="mt-3 w-100">

        @if ((ModelType)_modelType == ModelType.Classification &&
             _classificationModel1 is not null && _classificationModel2 is not null)
        {
            <div class="mt-5 d-inline-flex w-100">
                <ClassificationResult Title="Model pierwszy" TargetModel="@_classificationModel1" ComparativeModel="@_classificationModel2"/>
                <LineChart Values="@_rocValues1"/>
            </div>
            <div class="mt-5 d-inline-flex w-100">
                <ClassificationResult Title="Model drugi" TargetModel="@_classificationModel2" ComparativeModel="@_classificationModel1"/>
                <LineChart Values="@_rocValues2"/>
            </div>
        }
        @if ((ModelType)_modelType == ModelType.Regression &&
             _regressionModel1 is not null && _regressionModel2 is not null)
        {
            <div class="mt-5 d-inline-flex w-100">
                <RegressionResult Title="Model pierwszy" TargetModel="@_regressionModel1" ComparativeModel="@_regressionModel2"/>
                <RegressionResult Title="Model drugi" TargetModel="@_regressionModel2" ComparativeModel="@_regressionModel1"/>
            </div>
        }
    </div>
}

@code
{
    private readonly int _maxAllowedFileSize = 1024 * 1024 * 1024 * 1;

    private bool _isBadModel;
    private bool _wrongFileType;
    private bool _loading;
    private bool _calculated;
    private int _modelType = -1;

    private IBrowserFile? _file;

    private ClassificationModel? _classificationModel1;
    private ClassificationModel? _classificationModel2;

    private RegressionModel? _regressionModel1;
    private RegressionModel? _regressionModel2;

    private readonly List<Tuple<double, double>> _rocValues1 = new(new[] { new Tuple<double, double>(0.0, 0.0) });
    private readonly List<Tuple<double, double>> _rocValues2 = new(new[] { new Tuple<double, double>(0.0, 0.0) });

    private Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        try
        {
            if (file.ContentType != "text/csv")
            {
                _wrongFileType = true;
                return Task.CompletedTask;
            }
            _file = file;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        return Task.CompletedTask;
    }

    private async Task Generate()
    {
        if (_modelType is (int)ModelType.Default)
        {
            _isBadModel = true;
            return;
        }
        _isBadModel = false;

        if (_file is null)
        {
            _wrongFileType = true;
            return;
        }
        _wrongFileType = false;
        _loading = true;

        var reader =
            await new StreamReader(_file.OpenReadStream(_maxAllowedFileSize)).ReadToEndAsync();
        var data = reader.Split("\r\n").Select(x => x.Split(",")).ToList();
        switch ((ModelType)_modelType)
        {
            case ModelType.Classification:
                Classification(data);
                RocCurve(data);
                _loading = false;
                _calculated = true;
                break;

            case ModelType.Regression:
                Regression(data);
                _loading = false;
                _calculated = true;
                break;

            default:
                throw new ArgumentOutOfRangeException();
        }
    }

    private void Classification(List<string[]> data)
    {
        var classificationModel1 = new ClassificationModel();
        var classificationModel2 = new ClassificationModel();

        foreach (var row in data.Skip(1).SkipLast(1).ToList())
        {
            var realValue = row[0];
            var model1Value = row[1];
            var model2Value = row[3];

    // True value == <=50k
            if (realValue.Equals(">50K"))
            {
                if (model1Value == realValue)
                    classificationModel1.AddTruePositive();
                else
                    classificationModel1.AddFalseNegative();

                if (model2Value == realValue)
                    classificationModel2.AddTruePositive();
                else
                    classificationModel2.AddFalseNegative();
            }

    // False value == >50k
            else if (row[0].Equals("<=50K"))
            {
                if (model1Value == realValue)
                    classificationModel1.AddTrueNegative();
                else
                    classificationModel1.AddFalsePositive();

                if (model2Value == realValue)
                    classificationModel2.AddTrueNegative();
                else
                    classificationModel2.AddFalsePositive();
            }
        }
        _classificationModel1 = classificationModel1;
        _classificationModel2 = classificationModel2;
    }

    private void Regression(List<string[]> data)
    {
        var fixedData = data
            .Skip(1)
            .SkipLast(1)
            .Select(x => x
                .Select(double.Parse)
                .ToArray())
            .ToList();

        int n = fixedData.Count;
        double mae1 = 0, mse1 = 0, mape1 = 0;
        double mae2 = 0, mse2 = 0, mape2 = 0;

        foreach (var row in fixedData)
        {
            mae1 += Math.Abs(row[0] - row[1]);
            mae2 += Math.Abs(row[0] - row[2]);

            mse1 += Math.Pow(row[0] - row[1], 2);
            mse2 += Math.Pow(row[0] - row[2], 2);

            mape1 += Math.Abs(row[0] - row[1]) / row[0];
            mape2 += Math.Abs(row[0] - row[2]) / row[0];
        }
        mse1 /= n;
        mse2 /= n;

        _regressionModel1 = new();
        _regressionModel2 = new();

        _regressionModel1.MAE = mae1 / n;
        _regressionModel2.MAE = mae2 / n;

        _regressionModel1.MSE = mse1;
        _regressionModel2.MSE = mse2;

        _regressionModel1.RMSE = Math.Sqrt(mse1);
        _regressionModel2.RMSE = Math.Sqrt(mse2);

        _regressionModel1.MAPE = mape1 * (100.0 / n);
        _regressionModel2.MAPE = mape2 * (100.0 / n);
    }

    private void RocCurve(List<string[]> data)
    {
        var classificationModel1 = new ClassificationModel();
        var classificationModel2 = new ClassificationModel();

        for (double step = 0.01; step <= 1.0; step += 0.01)
        {
            classificationModel1.Reset();
            classificationModel2.Reset();
            foreach (var row in data.Skip(1).SkipLast(1).ToList())
            {
                var realValue = row[0];
                var model1Value = double.Parse(row[2]) >= step ? ">50K" : "<=50K";
                var model2Value = double.Parse(row[4]) >= step ? ">50K" : "<=50K";

    // True value == <=50k
                if (realValue.Equals(">50K"))
                {
                    if (model1Value == realValue)
                        classificationModel1.AddTruePositive();
                    else
                        classificationModel1.AddFalseNegative();

                    if (model2Value == realValue)
                        classificationModel2.AddTruePositive();
                    else
                        classificationModel2.AddFalseNegative();
                }

    // False value == >50k
                else if (row[0].Equals("<=50K"))
                {
                    if (model1Value == realValue)
                        classificationModel1.AddTrueNegative();
                    else
                        classificationModel1.AddFalsePositive();

                    if (model2Value == realValue)
                        classificationModel2.AddTrueNegative();
                    else
                        classificationModel2.AddFalsePositive();
                }
            }
            _rocValues1.Add(new(1 - classificationModel1.Specificity(), classificationModel1.Sensitivity()));
            _rocValues2.Add(new(1 - classificationModel2.Specificity(), classificationModel2.Sensitivity()));
        }
        _rocValues1.Sort();
        _rocValues2.Sort();

        _classificationModel1!.SetAuc(Auc(_rocValues1));
        _classificationModel2!.SetAuc(Auc(_rocValues2));
    }

    private double Auc(List<Tuple<double, double>> pointSet)
    {
        var result = 0.0;
        for (int i = 1; i < pointSet.Count; i++)
        {
            var h = pointSet[i].Item1 - pointSet[i - 1].Item1;
            result += h * (pointSet[i].Item2 + pointSet[i - 1].Item2) / 2;
        }

        return result;
    }

    private enum ModelType
    {
        Default = -1,
        Classification = 0,
        Regression = 1
    }
}